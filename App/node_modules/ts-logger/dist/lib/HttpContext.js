"use strict";
/**
 * Get request IP address.
 *
 * @private
 * @param {IncomingMessage} req
 * @return {string}
 */
function getIp(req) {
    return req.ip
        || req._remoteAddress
        || (req.connection && req.connection.remoteAddress)
        || "no-remote-addr";
}
var HttpContext = (function () {
    function HttpContext(req, res) {
        this.req = req;
        this.res = res;
    }
    HttpContext.prototype.url = function () {
        return this.req.originalUrl || this.req.url;
    };
    HttpContext.prototype.method = function () {
        return this.req.method;
    };
    HttpContext.prototype.status = function () {
        return this.res._header ? String(this.res.statusCode) : "no-status";
    };
    HttpContext.prototype.referrer = function () {
        return this.req.get('referer') || this.req.get('referrer');
    };
    /**
     * remote address
     */
    HttpContext.prototype.remoteAddr = function () {
        return getIp(this.req).replace('::ffff:', "");
    };
    HttpContext.prototype.httpVersion = function () {
        return this.req.httpVersionMajor + '.' + this.req.httpVersionMinor;
    };
    HttpContext.prototype.userAgent = function () {
        return this.req.get('user-agent');
    };
    HttpContext.prototype.reqHeader = function (field) {
        // get header
        var header = this.req.get[field];
        return Array.isArray(header) ? header.join(', ') : header;
    };
    HttpContext.prototype.resHeader = function (field) {
        if (!this.res._header) {
            return undefined;
        }
        var header;
        header = this.res.get(field);
        return Array.isArray(header) ? header.join(', ') : header;
    };
    return HttpContext;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = HttpContext;
