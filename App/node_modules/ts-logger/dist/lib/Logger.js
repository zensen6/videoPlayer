"use strict";
var StdMessage_1 = require("./StdMessage");
/**
 * Declare and exposes the Logger constructor.
 *
 * @export
 * @class Logger
 */
var Logger = (function () {
    function Logger() {
    }
    Logger.prototype.error = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i - 0] = arguments[_i];
        }
        var message = new (StdMessage_1.default.bind.apply(StdMessage_1.default, [void 0].concat(["ERROR"], messages)))();
        this.print(message);
    };
    Logger.prototype.warn = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i - 0] = arguments[_i];
        }
        var message = new (StdMessage_1.default.bind.apply(StdMessage_1.default, [void 0].concat(["WARN"], messages)))();
        this.print(message);
    };
    Logger.prototype.info = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i - 0] = arguments[_i];
        }
        var message = new (StdMessage_1.default.bind.apply(StdMessage_1.default, [void 0].concat(["INFO"], messages)))();
        this.print(message);
    };
    Logger.prototype.log = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i - 0] = arguments[_i];
        }
        var message = new (StdMessage_1.default.bind.apply(StdMessage_1.default, [void 0].concat(["LOG"], messages)))();
        this.print(message);
    };
    Logger.prototype.debug = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i - 0] = arguments[_i];
        }
        var message = new (StdMessage_1.default.bind.apply(StdMessage_1.default, [void 0].concat(["DEBUG"], messages)))();
        this.print(message);
    };
    Logger.prototype.silly = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i - 0] = arguments[_i];
        }
        var message = new (StdMessage_1.default.bind.apply(StdMessage_1.default, [void 0].concat(["SILLY"], messages)))();
        this.print(message);
    };
    /**
     * Set the console method that will be used to send the message out
     * and pass it to the print method
     *
     * @private
     * @param {LoggerLevel} loggerLevel (description)
     * @param parameters rest parameters you want to log
     */
    Logger.prototype.print = function (stdMessage) {
        var processStream = "std" + stdMessage.std;
        process[processStream].write(stdMessage.toString());
    };
    Logger.prototype.err = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i - 0] = arguments[_i];
        }
        return this.error.apply(this, messages);
    };
    Logger.prototype.middleware = function () {
    };
    return Logger;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Logger;
