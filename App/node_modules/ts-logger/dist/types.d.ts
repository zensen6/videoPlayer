// Generated by typings
// Source: dist/lib/Logger.d.ts
declare module '~ts-logger/dist/lib/Logger' {
/**
 * Declare and exposes the Logger constructor.
 *
 * @export
 * @class Logger
 */
export default class Logger {
    constructor();
    error(...messages: any[]): void;
    warn(...messages: any[]): void;
    info(...messages: any[]): void;
    log(...messages: any[]): void;
    debug(...messages: any[]): void;
    silly(...messages: any[]): void;
    /**
     * Set the console method that will be used to send the message out
     * and pass it to the print method
     *
     * @private
     * @param {LoggerLevel} loggerLevel (description)
     * @param parameters rest parameters you want to log
     */
    private print(stdMessage);
    err(...messages: any[]): void;
    middleware(): void;
}
}
declare module 'ts-logger/dist/lib/Logger' {
import alias = require('~ts-logger/dist/lib/Logger');
export = alias;
}

// Generated by typings
// Source: dist/lib/Middleware.d.ts
declare module '~ts-logger/dist/lib/Middleware' {
import * as express from 'express';
/**
 * Middleware
 */
export function middleware(): express.Handler;
}
declare module 'ts-logger/dist/lib/Middleware' {
import alias = require('~ts-logger/dist/lib/Middleware');
export = alias;
}

// Generated by typings
// Source: dist/index.d.ts
declare module 'ts-logger' {
import Logger from '~ts-logger/dist/lib/Logger';
export function logger(): Logger;
export { middleware } from '~ts-logger/dist/lib/Middleware';
}
